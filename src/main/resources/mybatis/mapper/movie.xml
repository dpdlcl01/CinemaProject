<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="movie">
    <!-- 사용자 메인 화면에서 예매율 상위 4개 영화 정보를 반환 -->
    <select id="getTopMovie" resultType="mybatis.vo.MovieVO">
        SELECT * FROM movie
        ORDER BY movieReservationRate DESC
        LIMIT 4
    </select>

    <!-- [박스오피스] 전체 영화 개수 반환.
        80위까지만 movieRank가 NULL이 아니게 설정해서 지금은 항상 80이 반환 -->
    <select id="totalMovieCount" resultType="int">
        SELECT COUNT(*)
        FROM movie
        WHERE movieStatus = 0 OR movieStatus = 1
        AND movieRank IS NOT NULL
    </select>

    <!-- 박스오피스 전체 영화 목록 offset 부터 pageSize만큼의 행 가져오기 -->
    <select id="getMovieList" resultType="mybatis.vo.MovieVO" parameterType="java.util.Map">
        SELECT *
        FROM movie
        WHERE movieStatus = 0 OR movieStatus = 1
        AND movieRank IS NOT NULL
        ORDER BY movieReservationRate DESC
        LIMIT ${offset}, ${pageSize}
    </select>

    <!-- 영화 상태에 따른 개수 반환 -->
    <select id="movieCountByStatus" resultType="int" parameterType="String">
        SELECT COUNT(*)
        FROM movie
        WHERE movieStatus = #{movieStatus}
        AND movieRank IS NOT NULL
    </select>

    <!-- 영화 상태에 따른 영화 목록 offset 부터 pageSize만큼의 행 가져오기 -->
    <select id="getMovieListByStatus" resultType="mybatis.vo.MovieVO" parameterType="java.util.Map">
        SELECT *
        FROM movie
        WHERE movieStatus = #{movieStatus}
        AND movieRank IS NOT NULL
        ORDER BY movieReservationRate DESC
        LIMIT ${offset}, ${pageSize}
    </select>


    <!-- 영화 검색을 위한 페이징 처리로 일단 전체 검색 결과 개수 -->
    <select id="searchMovieCount" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM movie
        WHERE (movieStatus = 0 OR movieStatus = 1)
        AND movieTitle LIKE CONCAT('%', #{movieTitle}, '%')
        AND movieRank IS NOT NULL
    </select>

    <!-- 전체 검색 결과 개수를 바탕으로 검색 결과 화면에 표현 -->
    <select id="searchMovieList" parameterType="java.util.Map" resultType="mybatis.vo.MovieVO">
        SELECT *
        FROM movie
        WHERE (movieStatus = 0 OR movieStatus = 1)
        AND movieTitle LIKE CONCAT('%', #{movieTitle}, '%')
        AND movieRank IS NOT NULL
        ORDER BY movieReservationRate DESC
        LIMIT ${offset}, ${pageSize}
    </select>




    <!-- 영화 idx를 받아서 사용자 영화 상세 화면으로 해당 영화 정보 반환 -->
    <select id="getMovieByIdx" parameterType="String" resultType="mybatis.vo.MovieVO">
        SELECT * FROM movie
        WHERE movieIdx = #{movieIdx}
    </select>

    <!-- 영화 idx를 받아서 예매율 순위를 반환. RANK() 함수는 MySQL 8.0 이상에서만 가능 -->
    <select id="calculateRank" parameterType="String" resultType="int">
        SELECT reservationRank
        FROM (
            SELECT movieIdx, movieRank, @rank := @rank + 1 AS reservationRank
            FROM movie, (SELECT @rank := 0) r
            ORDER BY movieRank ASC
            ) AS Movies
        WHERE movieIdx = #{movieIdx}
    </select>


    <!--  원글들을 가져오는 기능 (status가 1이면 삭제된 글,
        정렬로 가장 최근의 글을 맨 위로 올라오게 해야 함!) -->
    <select id="adminMovieList" resultType="mybatis.vo.MovieVO" parameterType="Map">
        SELECT * FROM(
        SELECT @RN:=@RN+1 AS rnum, a.* FROM(
        SELECT * FROM movie
        WHERE movieStatus = 0 OR movieStatus = 1
        AND movieRank IS NOT NULL
        ORDER BY movieReservationRate DESC
        ) a, (SELECT @RN:=0) b
        ) c WHERE c.rnum BETWEEN #{begin} AND #{end}
    </select>

    <!-- 관리자 모드에서 OPEN API를 이용하여 영화 정보를 DB에 저장 -->
    <insert id="addNewMovie" parameterType="mybatis.vo.MovieVO">
        INSERT INTO movie(movieCd, movieTitle, movieTitleEn, movieGenre, movieTime, movieGrade, movieDate,
        movieDirector, movieActors, movieInfo, moviePosterUrl,
        movieRank, movieReservationRate, movieTotalAudience, movieLikes, movieStatus)
        VALUES (#{movieCd}, #{movieTitle}, #{movieTitleEn}, #{movieGenre}, #{movieTime}, #{movieGrade}, #{movieDate},
        #{movieDirector}, #{movieActors}, #{movieInfo}, #{moviePosterUrl},
        #{movieRank}, #{movieReservationRate}, #{movieTotalAudience}, #{movieLikes}, #{movieStatus})
    </insert>

    <!-- 예매 가능한 영화 조회  -->
    <select id="movieList" parameterType="map" resultType="mybatis.vo.MovieVO">
        SELECT *
        FROM movie
        WHERE movieStatus = 0 OR movieStatus = 1
    </select>
    <!--  영화 정보 상세 조회 (seat)  -->
    <select id="movieDetail" parameterType="String" resultType="mybatis.vo.MovieVO">
        SELECT *
        FROM movie
        WHERE movieIdx = #{movieIdx}
    </select>

</mapper>